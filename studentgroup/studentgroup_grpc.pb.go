// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: studentgroup/studentgroup.proto

package studentgroup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentGroup_CreateStudentGroup_FullMethodName   = "/openim.studentgroup.studentGroup/createStudentGroup"
	StudentGroup_JoinStudentGroup_FullMethodName     = "/openim.studentgroup.studentGroup/joinStudentGroup"
	StudentGroup_GetStudentGroupsInfo_FullMethodName = "/openim.studentgroup.studentGroup/getStudentGroupsInfo"
	StudentGroup_SetStudentGroupInfo_FullMethodName  = "/openim.studentgroup.studentGroup/setStudentGroupInfo"
)

// StudentGroupClient is the client API for StudentGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentGroupClient interface {
	// Create group
	CreateStudentGroup(ctx context.Context, in *CreateStudentGroupReq, opts ...grpc.CallOption) (*CreateStudentGroupResp, error)
	// Apply to join group
	JoinStudentGroup(ctx context.Context, in *StudentJoinGroupReq, opts ...grpc.CallOption) (*StudentJoinGroupResp, error)
	// Get specific group info
	GetStudentGroupsInfo(ctx context.Context, in *GetStudentGroupsInfoReq, opts ...grpc.CallOption) (*GetStudentGroupsInfoResp, error)
	// Set group info
	SetStudentGroupInfo(ctx context.Context, in *SetStudentGroupInfoReq, opts ...grpc.CallOption) (*SetStudentGroupInfoResp, error)
}

type studentGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentGroupClient(cc grpc.ClientConnInterface) StudentGroupClient {
	return &studentGroupClient{cc}
}

func (c *studentGroupClient) CreateStudentGroup(ctx context.Context, in *CreateStudentGroupReq, opts ...grpc.CallOption) (*CreateStudentGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudentGroupResp)
	err := c.cc.Invoke(ctx, StudentGroup_CreateStudentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentGroupClient) JoinStudentGroup(ctx context.Context, in *StudentJoinGroupReq, opts ...grpc.CallOption) (*StudentJoinGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudentJoinGroupResp)
	err := c.cc.Invoke(ctx, StudentGroup_JoinStudentGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentGroupClient) GetStudentGroupsInfo(ctx context.Context, in *GetStudentGroupsInfoReq, opts ...grpc.CallOption) (*GetStudentGroupsInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentGroupsInfoResp)
	err := c.cc.Invoke(ctx, StudentGroup_GetStudentGroupsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentGroupClient) SetStudentGroupInfo(ctx context.Context, in *SetStudentGroupInfoReq, opts ...grpc.CallOption) (*SetStudentGroupInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStudentGroupInfoResp)
	err := c.cc.Invoke(ctx, StudentGroup_SetStudentGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentGroupServer is the server API for StudentGroup service.
// All implementations must embed UnimplementedStudentGroupServer
// for forward compatibility.
type StudentGroupServer interface {
	// Create group
	CreateStudentGroup(context.Context, *CreateStudentGroupReq) (*CreateStudentGroupResp, error)
	// Apply to join group
	JoinStudentGroup(context.Context, *StudentJoinGroupReq) (*StudentJoinGroupResp, error)
	// Get specific group info
	GetStudentGroupsInfo(context.Context, *GetStudentGroupsInfoReq) (*GetStudentGroupsInfoResp, error)
	// Set group info
	SetStudentGroupInfo(context.Context, *SetStudentGroupInfoReq) (*SetStudentGroupInfoResp, error)
	mustEmbedUnimplementedStudentGroupServer()
}

// UnimplementedStudentGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentGroupServer struct{}

func (UnimplementedStudentGroupServer) CreateStudentGroup(context.Context, *CreateStudentGroupReq) (*CreateStudentGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentGroup not implemented")
}
func (UnimplementedStudentGroupServer) JoinStudentGroup(context.Context, *StudentJoinGroupReq) (*StudentJoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinStudentGroup not implemented")
}
func (UnimplementedStudentGroupServer) GetStudentGroupsInfo(context.Context, *GetStudentGroupsInfoReq) (*GetStudentGroupsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGroupsInfo not implemented")
}
func (UnimplementedStudentGroupServer) SetStudentGroupInfo(context.Context, *SetStudentGroupInfoReq) (*SetStudentGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStudentGroupInfo not implemented")
}
func (UnimplementedStudentGroupServer) mustEmbedUnimplementedStudentGroupServer() {}
func (UnimplementedStudentGroupServer) testEmbeddedByValue()                      {}

// UnsafeStudentGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentGroupServer will
// result in compilation errors.
type UnsafeStudentGroupServer interface {
	mustEmbedUnimplementedStudentGroupServer()
}

func RegisterStudentGroupServer(s grpc.ServiceRegistrar, srv StudentGroupServer) {
	// If the following call pancis, it indicates UnimplementedStudentGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentGroup_ServiceDesc, srv)
}

func _StudentGroup_CreateStudentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentGroupServer).CreateStudentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentGroup_CreateStudentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentGroupServer).CreateStudentGroup(ctx, req.(*CreateStudentGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentGroup_JoinStudentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentJoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentGroupServer).JoinStudentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentGroup_JoinStudentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentGroupServer).JoinStudentGroup(ctx, req.(*StudentJoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentGroup_GetStudentGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentGroupServer).GetStudentGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentGroup_GetStudentGroupsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentGroupServer).GetStudentGroupsInfo(ctx, req.(*GetStudentGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentGroup_SetStudentGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStudentGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentGroupServer).SetStudentGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentGroup_SetStudentGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentGroupServer).SetStudentGroupInfo(ctx, req.(*SetStudentGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentGroup_ServiceDesc is the grpc.ServiceDesc for StudentGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.studentgroup.studentGroup",
	HandlerType: (*StudentGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createStudentGroup",
			Handler:    _StudentGroup_CreateStudentGroup_Handler,
		},
		{
			MethodName: "joinStudentGroup",
			Handler:    _StudentGroup_JoinStudentGroup_Handler,
		},
		{
			MethodName: "getStudentGroupsInfo",
			Handler:    _StudentGroup_GetStudentGroupsInfo_Handler,
		},
		{
			MethodName: "setStudentGroupInfo",
			Handler:    _StudentGroup_SetStudentGroupInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studentgroup/studentgroup.proto",
}
